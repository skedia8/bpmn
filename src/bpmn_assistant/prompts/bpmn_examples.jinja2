# Process examples

The order of execution in the BPMN process is determined by the sequence of elements in the top-level "process" array. Elements are executed in the order they appear in this array, from first to last.

Textual description:
"The student sends an email to the professor. The professor receives the email. If the professor agrees with the proposal, he replies to the student."

```json
{
    "process": [
        {
            "type": "startEvent",
            "id": "start",
        },
        {
            "type": "userTask",
            "id": "task1",
            "label": "Send email to professor",
        },
        {
            "type": "task",
            "id": "task2",
            "label": "Receive the email",
        },
        {
            "type": "exclusiveGateway",
            "id": "exclusive1",
            "label": "Professor agrees?",
            "has_join": true,
            "branches": [
                {
                    "condition": "If the professor agrees",
                    "path": [
                        {
                            "type": "task",
                            "id": "task3",
                            "label": "Reply to the student",
                        }
                    ]
                },
                {
                    "condition": "If the professor does not agree",
                    "path": []
                }
            ]
        },
        {
            "type": "endEvent",
            "id": "end1",
        }
    ]
}
```

---

Textual description:
"The manager sends the mail to the supplier and prepares the documents. At the same time, the customer searches for the goods and picks up the goods."

```json
{
    "process": [
        {
            "type": "startEvent",
            "id": "start",
        },
        {
            "type": "parallelGateway",
            "id": "parallel1",
            "branches": [
                [
                    {
                        "type": "serviceTask",
                        "id": "task1",
                        "label": "Send mail to supplier",
                    },
                    {
                        "type": "task",
                        "id": "task2",
                        "label": "Prepare the documents",
                    }
                ],
                [
                    {
                        "type": "task",
                        "id": "task3",
                        "label": "Search for the goods",
                    },
                    {
                        "type": "task",
                        "id": "task4",
                        "label": "Pick up the goods",
                    }
                ]
            ]
        },
        {
            "type": "endEvent",
            "id": "end1",
        }
    ]
}
```

---

Textual description: "Someone starts a process by entering an exam room. After that, they take the test. Once the exam is finished, their score is checked. If they scored more than 50%, their grade is recorded and the process ends. But if they fail, they have to go back to the beginning and take the exam again."

```json
{
    "process": [
      {
        "type": "startEvent",
        "id": "start"
      },
      {
        "type": "task",
        "id": "task1",
        "label": "Enter exam room"
      },
      {
        "type": "task",
        "id": "task2",
        "label": "Take test"
      },
      {
        "type": "exclusiveGateway",
        "id": "eg",
        "label": "Score more than 50%?",
        "has_join": false,
        "branches": [
          {
            "condition": "Yes",
            "path": [
              {
                "type": "task",
                "id": "task3",
                "label": "Enter grade"
              },
              {
                "type": "endEvent",
                "id": "end1"
              }
            ]
          },
          {
            "condition": "No",
            "path": [],
            "next": "task1"
          }
        ]
      }
    ]
}
```

---

Textual description: "The process starts with a decision. If Option A is selected, Task A is performed. If Option B is selected, Task B is performed. Task A is followed by another decision. If Sub-option 1 is selected, Task A1 is performed. If Sub-option 2 is selected, Task A2 is performed."


```json
{
  "process": [
    {
      "type": "startEvent",
      "id": "start",
    },
    {
      "type": "exclusiveGateway",
      "id": "gateway1",
      "label": "Main Decision",
      "has_join": false,
      "branches": [
        {
          "condition": "Option A",
          "path": [
            {
              "type": "task",
              "id": "taskA",
              "label": "Perform Task A",
            },
            {
              "type": "exclusiveGateway",
              "id": "gateway2",
              "label": "Nested Decision",
              "has_join": false,
              "branches": [
                {
                  "condition": "Sub-option 1",
                  "path": [
                    {
                      "type": "task",
                      "id": "taskA1",
                      "label": "Perform Task A1",
                    }
                  ],
                },
                {
                  "condition": "Sub-option 2",
                  "path": [
                    {
                      "type": "task",
                      "id": "taskA2",
                      "label": "Perform Task A2",
                    }
                  ],
                }
              ]
            }
          ],
        },
        {
          "condition": "Option B",
          "path": [
            {
              "type": "task",
              "id": "taskB",
              "label": "Perform Task B",
            }
          ],
        }
      ]
    },
    {
      "type": "endEvent",
      "id": "end",
    }
  ]
}
```

---

Textual description: "An order process starts when a customer submits an order. The order is then processed by the system. If the order is valid, it is fulfilled and the process ends with a successful delivery. If the order is invalid, the process ends with order rejection."

```json
{
  "process": [
    {
      "type": "startEvent",
      "id": "start",
      "label": "Order submitted"
    },
    {
      "type": "task",
      "id": "task1",
      "label": "Process order"
    },
    {
      "type": "exclusiveGateway",
      "id": "gateway1",
      "label": "Order valid?",
      "has_join": false,
      "branches": [
        {
          "condition": "Yes",
          "path": [
            {
              "type": "task",
              "id": "task2",
              "label": "Fulfill order"
            },
            {
              "type": "endEvent",
              "id": "end1",
              "label": "Order delivered"
            }
          ]
        },
        {
          "condition": "No",
          "path": [
            {
              "type": "endEvent",
              "id": "end2",
              "label": "Order rejected"
            }
          ]
        }
      ]
    }
  ]
}
```